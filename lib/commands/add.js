'use strict';

const _ = require('lodash');
const path = require('path');
const moment = require('moment');
const inquirer = require('inquirer');
const Resource = require('../resource');

const RESOURCE_TYPES = {
  ruby: {
    type: 'ruby',
    ext: '.rb'
  },
  python: {
    type: 'python',
    ext: '.py'
  },
  javascript: {
    type: 'javascript',
    ext: '.js'
  },
  html: {
    type: 'html',
    ext: '.html'
  },
  css: {
    type: 'css',
    ext: '.css'
  },
  scss: {
    type: 'scss',
    ext: '.scss'
  },
  less: {
    type: 'less',
    ext: '.less'
  }
};

/**
 *
 * @param {Object} options
 */
module.exports = async function add(options) {
  const pathName = path.join(options.templatesDir, options.name + options.extension);
  let meta = {
    file: {
      type: null,
      ext: null
    },
    data: {}
  };
  const resource = new Resource({
    name: pathName,
    test: stat => stat.isFile(),
    meta: meta,
    contents: `/**\n  Generated by Stencils(stpl]) on ${moment()}\n**/\n`,
    exists: (print) => {
      print.warn('~ template exists');
    },
    notExists: (print, make) => {
      inquirer.prompt([
        {
          type: 'list',
          name: 'file_type',
          message: 'File Type',
          choices: _.chain(RESOURCE_TYPES).values().map('type').value()
        }
      ])
      .then(function(answers) {
        let _resource = RESOURCE_TYPES[answers.file_type];
        meta.file.type = _resource.type;
        meta.file.ext = _resource.ext;
        print.info(`+ creating ${pathName} ${_resource.type} template`);
        return make();
      });
    }
  });
  return resource.run();
}