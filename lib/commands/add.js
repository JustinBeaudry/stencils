'use strict';

const _ = require('lodash');
const path = require('path');
const moment = require('moment');
const inquirer = require('inquirer');
const Resource = require('../resource');
const Command = require('./command');

module.exports = class AddCommand extends Command {
  constructor() {
    super('add');
  }

  async run(options) {
    const pathName = path.join(this.templatesDir, options.name + this.engine.ext);
    let meta = {
      file: {
        type: null,
        ext: null
      },
      keys: {}
    };
    const resource = new Resource({
      name: pathName,
      test: stat => stat.isFile(),
      meta: meta,
      contents: `/**\n  Generated by Stencils on ${moment()}\n**/\n`,
      exists: () => {
        this.log.warn('~ template exists');
      },
      notExists: async make => {
        await inquirer.prompt([
          {
            type: 'list',
            name: 'fileType',
            message: 'File Type',
            choices: _.chain(Resource.getType()).values().map('type').value()
          }
        ])
          .then((answers) => {
            let _resource = Resource.getType(answers.fileType);
            meta.file.type = _resource.type;
            meta.file.ext = _resource.ext;
            this.log.info(`+ creating ${pathName} ${_resource.type} template`);
          });
        return make();
      }
    });
    return resource.run();
  }
}
