'use strict';

const _         = require('lodash');
const path      = require('path');
const moment    = require('moment');
const inquirer  = require('inquirer');
const Resource  = require('../resource');
const Command   = require('./command');

module.exports = class AddCommand extends Command {
  constructor() {
    super('add');
  }

  /**
   *
   * @param {{
       name: String,
       force: Boolean
     }} argv
   * @returns {Promise}
   */
  async run(argv={}) {
   const pathName = path.join(this.templatesDir, argv.name + this.engine.ext);
    let meta = {
      file: {
        type: null,
        ext: null
      },
      keys: {},
      engine: this.engine.name
    };
    return new Resource({
      name: pathName,
      meta: meta,
      contents: `/**\n  Generated by Stencils on ${moment()}\n**/\n`,
      exists: () => {
        this.log.warn('~ template exists');
      },
      notExists: async make => {
        await inquirer.prompt([
          {
            type: 'list',
            name: 'fileType',
            message: 'File Type',
            choices: _.chain(Resource.getType()).values().map('type').value()
          }
        ])
        .then(answers => {
          let resource = Resource.getType(answers.fileType);
          meta.file.type = resource.type;
          meta.file.ext = resource.ext;
          this.log.info(`+ creating ${path.join(this.root, pathName)} ${resource.type} template`);
        });
        return make(this.root);
      }
    }).execTest(argv.force);
  }
}
