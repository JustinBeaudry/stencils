'use strict';

const _         = require('lodash');
const path      = require('path');
const moment    = require('moment');
const inquirer  = require('inquirer');
const Resource  = require('../resource');
const Command   = require('./command');

module.exports = class AddCommand extends Command {
  constructor() {
    super('add');
  }
  /**
   *
   * @param {{
       name: String,
       force: Boolean
     }} argv
   * @returns {Promise}
   */
  async run(argv={}) {
    const commandContext = this;
    // @TODO:  if name has / in it, set argv.dirPath
    // @TODO:  make argv.dirPath a human readable constant
    let name = path.join(argv.name + this.engine.ext);
    return new Resource({
      name: name,
      meta: {
        file: {
          type: null,
          ext: null
        },
        keys: {},
        engine: this.engine.name
      },
      contents: `/**\n  Generated by Stencils on ${moment()}\n**/\n`,
      exists: () => {
        this.log.warn('~ template exists');
      },
      notExists: async function(make) {
        let newName;
        if (argv.dirPath) {
          newName = await commandContext.promptForName();
          this.name = path.join(this.name, newName);
        }
        const resource = await commandContext.fileTypePrompt()
        const isDirectory = resource.file.type === 'directory';
        this.meta = Object.assign(this.meta, resource);
        if (isDirectory) {
          this.contents = null;
        }
        if (argv.dirPath) {
          this.name = path.join(commandContext.templatesDir, argv.dirPath, name);
        } else {
          this.name = path.join(commandContext.templatesDir, this.name);
        }
        console.log('\n\n\n\n ======================================= this.name ====================================\n', this.name, '\n\n\n\n\n');
        commandContext.log.info(`+ creating ${path.join(commandContext.root, name)} - ${resource.file.type}`);
        await make(commandContext.root);
        if (isDirectory || argv.dirPath) {
          const addMore = await commandContext.addMorePrompt()
          if (addMore) {
            return commandContext.run(Object.assign(argv, { dirPath: name }));
          }
        }
      }
    }).execTest(argv.force);
  }
  /**
   *
   * @returns {Promise}
   */
  fileTypePrompt() {
    return inquirer.prompt([
      {
        type: 'list',
        name: 'fileType',
        message: 'File Type',
        choices: _.chain(Resource.getType()).values().map('type').value()
      }
    ])
    .then(answers => {
      let resource = Resource.getType(answers.fileType);
      return {
        file: {
          type: resource.type,
          ext: resource.ext
        }
      };
    });
  }
  /**
   *
   * @returns {Promise}
   */
  addMorePrompt() {
    return inquirer.prompt([
      {
        type: 'confirm',
        name: 'addMore',
        message: 'Add additional templates to directory?'
      }
    ])
    .then(answers => {
      return answers.addMore;
    });
  }

  promptForName() {
    return inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: 'File Name'
      }
    ])
    .then(answers => {
      return answers.name;
    });
  }
}
